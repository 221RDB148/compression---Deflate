//     while input is not empty do
//     match := longest repeated occurrence of input that begins in window
    
//     if match exists then
//         d := distance to start of match
//         l := length of match
//         c := char following match in input
//     else
//         d := 0
//         l := 0
//         c := first char of input
//     end if
    
//     output (d, l, c)
    
//     discard l + 1 chars from front of window
//     s := pop l + 1 chars from front of input
//     append s to back of window
// repeat
____________________________________________
function compress_lz77(input_data, window_size, buffer_size):
    # Initialize output buffer
    output_buffer = []
    
    # Initialize search window and look-ahead buffer
    search_window = ""
    look_ahead_buffer = input_data[0:buffer_size]
    
    # Loop through input data
    while look_ahead_buffer is not empty:
        # Find the longest matching string in the search window
        match = find_longest_match(search_window, look_ahead_buffer)
        
        # If a match is found, output a length-distance pair
        if match:
            output_buffer.append((match.length, match.distance))
            
            # Move the search window and look-ahead buffer
            search_window = search_window + look_ahead_buffer[0:match.length]
            look_ahead_buffer = input_data[0:buffer_size]
        else:
            # Output the next symbol as a literal
            output_buffer.append(look_ahead_buffer[0])
            
            # Move the search window and look-ahead buffer
            search_window = search_window + look_ahead_buffer[0]
            look_ahead_buffer = look_ahead_buffer[1:]
            
            # Truncate the search window to the maximum size
            if len(search_window) > window_size:
                search_window = search_window[-window_size:]
    
    return output_buffer
    
function find_longest_match(search_window, look_ahead_buffer):
    # Find the longest matching string in the search window
    for i in range(len(look_ahead_buffer), 0, -1):
        substring = look_ahead_buffer[0:i]
        distance = search_window.rfind(substring)
        if distance != -1:
            length = len(substring)
            return Match(length, distance)
    
    return None
    
class Match:
    def __init__(self, length, distance):
        self.length = length
        self.distance = distance